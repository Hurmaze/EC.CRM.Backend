// <auto-generated />
using EC.CRM.Backend.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EC.CRM.Backend.Persistence.Migrations
{
    [DbContext(typeof(EngineeringClubDbContext))]
    [Migration("20240208175851_UpdateConstraints")]
    partial class UpdateConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserInfoUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uid");

                    b.HasIndex("UserInfoUid");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Uid");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Mentor", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserInfoUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uid");

                    b.HasIndex("UserInfoUid")
                        .IsUnique();

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Uid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.State", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Uid");

                    b.ToTable("States");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<int>("MentorUid")
                        .HasColumnType("int");

                    b.Property<Guid>("StateUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserInfoUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uid");

                    b.HasIndex("MentorUid");

                    b.HasIndex("StateUid");

                    b.HasIndex("UserInfoUid")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CurentSalary")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Paid")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Uid");

                    b.HasIndex("RoleUid");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Job", b =>
                {
                    b.HasOne("EC.CRM.Backend.Domain.Entities.UserInfo", "UserInfo")
                        .WithMany("Jobs")
                        .HasForeignKey("UserInfoUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Mentor", b =>
                {
                    b.HasOne("EC.CRM.Backend.Domain.Entities.UserInfo", "UserInfo")
                        .WithOne("MentorProperties")
                        .HasForeignKey("EC.CRM.Backend.Domain.Entities.Mentor", "UserInfoUid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Student", b =>
                {
                    b.HasOne("EC.CRM.Backend.Domain.Entities.Mentor", "Mentor")
                        .WithMany("Students")
                        .HasForeignKey("MentorUid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EC.CRM.Backend.Domain.Entities.State", "State")
                        .WithMany("Students")
                        .HasForeignKey("StateUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EC.CRM.Backend.Domain.Entities.UserInfo", "UserInfo")
                        .WithOne("StudentProperties")
                        .HasForeignKey("EC.CRM.Backend.Domain.Entities.Student", "UserInfoUid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("State");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.UserInfo", b =>
                {
                    b.HasOne("EC.CRM.Backend.Domain.Entities.Role", "Role")
                        .WithMany("UserInfos")
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    

                    b.Navigation("Role");
                });

            

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Mentor", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.State", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EC.CRM.Backend.Domain.Entities.UserInfo", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("MentorProperties");

                    b.Navigation("StudentProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
